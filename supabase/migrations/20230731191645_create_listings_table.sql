create table public.listings (
  listingId bigint generated by default as identity not null,
  listingType text not null check (listingType in ('RENTAL', 'SUBLEASE')),
  status text not null check (status in ('NOT_LISTED', 'FOR_RENT', 'RENTED'))),

  buildingName text,
  description text,

  addressFull text,
  addressCity text,
  addressState text,
  addressStreet text,
  addressZipcode text, -- is integer best ?
  location geography,

  squareFootage integer, -- is integer best ?
  baths integer,
  beds integer,

  hasImage boolean not null,
  previewImgSrc text,
  additionalImgSrcs text[],

  rangedPrice boolean not null, -- is price a range or single value
  price int, -- monthly cost if estimatedPrice is false
  priceEstimateLow int, -- monthly cost if estimatedPrice is true
  priceEstimateHigh int, -- monthly cost if estimatedPrice is true

  -- Should be broken out "lister" or "PropertyOwner" table
  listingContactName text,
  listingContactEmail text,
  listingContactPhone text,

  listingSource text not null, -- where listing was found
  listingSourceId text not null, -- id of listing on listingSource
  listingSourceDetailUrl text, -- find more information on listing

  createdAt timestamp with time zone not null default timezone ('utc'::text, now()),
  listedAt timestamp with time zone not null default timezone ('utc'::text, now()),
  listingStartDate timestamp with time zone not null default timezone ('utc'::text, now()),
  updatedAt timestamp with time zone not null default timezone ('utc'::text, now()),
  daysOnMarket integer not null default 0,

  constraint listings_pkey primary key (id)
) tablespace pg_default;

create index if not exists listings_geo_index on public.listings using gist (location) tablespace pg_default;
